Git repo analyzer 
 - clone github repos using JGit into local
 - obtain fixes using commit history
 - using JGit generate patch files (mostly possible)
 
 - use Understand API to read patch files (research)
 
 ALGO:
 
 - output JSON/XML containing changes for each method 
	 
	 <method frequency=20>m1
		<file>f.java</file>
		<change>
			<parameter oldtype="int" newtype="double">salary</parameter>
		</change>
		<change>
			<ifstatement addcondition="true">salary \gt 0</ifstatement>
		</change>
	 </method>
	 
 - our algo generates above JSON/XML. The algo should be an "abstraction" which is not very generic or very specific. i.e. it should not be hardly coupled/coded to a particular type of change. 

 
Tasks:

1. Get closed issues that have pull requests from Github 
2. get code for corresponding commit  // pending : some commits checkout error


3. for every commit apply patch on current version (initially starting with base version)
4. keep on updating the UDBs and generate metrics and graphs using understand //graphs to be generated


5. Compare consecutive UDBs to identify entity and relationship changes // to be checked for multiple files  
6. Make entry in xml for each change for each project

7. take collection of xmls and do pattern matching to identify common bugs
 
 
 Links:
 Understand Python API : https://scitools.com/support/python-api/
 Git Patch Understanding : http://www.markusbe.com/2009/12/how-to-read-a-patch-or-diff-and-understand-its-structure-to-apply-it-manually/
 Manual : https://scitools.com/support/manuals/
 
 
 
 
 